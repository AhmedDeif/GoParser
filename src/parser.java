
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\015\004\000" +
    "\002\015\004\000\002\020\004\000\002\020\006\000\002" +
    "\020\005\000\002\022\005\000\002\022\004\000\002\023" +
    "\003\000\002\023\005\000\002\023\006\000\002\054\003" +
    "\000\002\054\004\000\002\054\004\000\002\054\004\000" +
    "\002\054\004\000\002\054\004\000\002\054\004\000\002" +
    "\054\004\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\075\003\000\002\076\004" +
    "\000\002\076\004\000\002\077\006\000\002\077\005\000" +
    "\002\072\005\000\002\072\007\000\002\072\007\000\002" +
    "\072\007\000\002\072\011\000\002\072\011\000\002\073" +
    "\003\000\002\101\006\000\002\101\010\000\002\101\007" +
    "\000\002\101\011\000\002\106\004\000\002\106\002\000" +
    "\002\107\005\000\002\110\004\000\002\110\003\000\002" +
    "\074\005\000\002\105\007\000\002\104\003\000\002\102" +
    "\003\000\002\103\003\000\002\070\003\000\002\070\004" +
    "\000\002\071\003\000\002\024\003\000\002\024\005\000" +
    "\002\025\003\000\002\025\005\000\002\111\003\000\002" +
    "\111\005\000\002\111\005\000\002\111\005\000\002\111" +
    "\005\000\002\111\005\000\002\111\005\000\002\111\005" +
    "\000\002\111\005\000\002\111\005\000\002\111\005\000" +
    "\002\111\005\000\002\111\005\000\002\047\003\000\002" +
    "\047\003\000\002\055\003\000\002\056\003\000\002\057" +
    "\004\000\002\021\004\000\002\021\006\000\002\060\005" +
    "\000\002\060\002\000\002\061\005\000\002\061\004\000" +
    "\002\061\006\000\002\062\005\000\002\016\005\000\002" +
    "\016\005\000\002\063\003\000\002\017\006\000\002\017" +
    "\006\000\002\065\003\000\002\064\003\000\002\027\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\026\003\000\002\026\004\000\002\026\004\000\002" +
    "\032\004\000\002\033\004\000\002\033\005\000\002\036" +
    "\006\000\002\066\006\000\002\066\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\005\000" +
    "\002\034\003\000\002\034\003\000\002\037\003\000\002" +
    "\037\003\000\002\035\003\000\002\035\003\000\002\041" +
    "\006\000\002\040\004\000\002\042\004\000\002\043\003" +
    "\000\002\043\004\000\002\046\003\000\002\046\005\000" +
    "\002\045\004\000\002\045\005\000\002\050\003\000\002" +
    "\050\005\000\002\051\004\000\002\051\005\000\002\044" +
    "\003\000\002\052\005\000\002\053\004\000\002\053\002" +
    "\000\002\003\004\000\002\004\005\000\002\004\002\000" +
    "\002\005\004\000\002\005\006\000\002\011\005\000\002" +
    "\011\002\000\002\012\003\000\002\012\004\000\002\012" +
    "\004\000\002\013\003\000\002\010\003\000\002\014\003" +
    "\000\002\014\002\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\011\005\001\002\000\004\002\u0119\001" +
    "\002\000\004\051\136\001\002\000\016\002\uff6c\006\uff6c" +
    "\013\uff6c\016\uff6c\020\uff6c\031\007\001\002\000\060\002" +
    "\uff6d\004\uff6d\005\uff6d\006\uff6d\007\uff6d\012\uff6d\013\uff6d" +
    "\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\024\uff6d\025" +
    "\uff6d\026\uff6d\027\uff6d\030\uff6d\033\uff6d\040\uff6d\044\uff6d" +
    "\051\uff6d\053\uff6d\054\uff6d\001\002\000\014\002\uff77\006" +
    "\uff77\013\uff77\016\011\020\uff77\001\002\000\012\025\u010f" +
    "\033\u0110\051\136\053\u010d\001\002\000\016\002\uff6c\006" +
    "\uff6c\013\uff6c\016\uff6c\020\uff6c\031\007\001\002\000\012" +
    "\002\uffff\006\015\013\025\020\022\001\002\000\004\031" +
    "\u0108\001\002\000\006\025\160\051\377\001\002\000\012" +
    "\002\ufffc\006\ufffc\013\ufffc\020\ufffc\001\002\000\012\002" +
    "\ufffd\006\015\013\025\020\022\001\002\000\014\002\uff6c" +
    "\006\uff6c\013\uff6c\020\uff6c\031\007\001\002\000\014\002" +
    "\uff6c\006\uff6c\013\uff6c\020\uff6c\031\007\001\002\000\006" +
    "\025\360\051\357\001\002\000\004\002\000\001\002\000" +
    "\004\031\356\001\002\000\006\025\030\051\027\001\002" +
    "\000\004\031\ufff7\001\002\000\012\006\037\031\ufff2\036" +
    "\043\051\044\001\002\000\006\026\031\051\027\001\002" +
    "\000\004\031\ufff5\001\002\000\004\031\035\001\002\000" +
    "\004\026\034\001\002\000\004\031\ufff6\001\002\000\006" +
    "\026\ufff3\051\027\001\002\000\004\026\ufff4\001\002\000" +
    "\004\025\160\001\002\000\012\026\uffb5\031\uffb5\032\uffb5" +
    "\036\uffb5\001\002\000\012\026\uffb4\031\uffb4\032\uffb4\036" +
    "\uffb4\001\002\000\004\036\353\001\002\000\024\006\054" +
    "\024\057\025\056\033\060\040\051\044\047\051\050\053" +
    "\046\054\062\001\002\000\012\026\uffb3\031\uffb3\032\uffb3" +
    "\036\uffb3\001\002\000\012\026\uffb2\031\uffb2\032\uffb2\036" +
    "\uffb2\001\002\000\056\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\036\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d" +
    "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\052\uff8d\001\002\000" +
    "\024\006\054\024\057\025\056\033\060\040\051\044\047" +
    "\051\050\053\046\054\062\001\002\000\056\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\uff8c\036\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\052\uff8c\001\002\000\024\006\054\024\057\025\056\033" +
    "\060\040\051\044\047\051\050\053\046\054\062\001\002" +
    "\000\034\021\106\022\115\023\107\024\101\031\ufff1\040" +
    "\113\041\114\042\104\043\103\044\112\045\110\046\105" +
    "\052\102\001\002\000\056\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\031\uff92\032\uff92\033\uff92" +
    "\034\uff92\036\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\052\uff92\001\002" +
    "\000\004\025\160\001\002\000\056\021\uff90\022\uff90\023" +
    "\uff90\024\uff90\025\uff90\026\uff90\027\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\036\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\052\uff90" +
    "\001\002\000\024\006\054\024\057\025\056\033\060\040" +
    "\051\044\047\051\050\053\046\054\062\001\002\000\024" +
    "\006\054\024\057\025\056\033\060\040\051\044\047\051" +
    "\050\053\046\054\062\001\002\000\006\025\137\051\136" +
    "\001\002\000\056\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\031\uff94\032\uff94\033\uff94\034\uff94" +
    "\036\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\052\uff94\001\002\000\056" +
    "\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\036\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\052\uff8e\001\002\000\056\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\025\073\026\uffa1\027\uffa1\031\uffa1\032" +
    "\uffa1\033\074\034\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052" +
    "\uffa1\001\002\000\056\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\036\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93" +
    "\045\uff93\046\uff93\047\uff93\050\uff93\052\uff93\001\002\000" +
    "\056\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d" +
    "\027\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\036\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\052\uff9d\001\002\000\056\021\uff8b\022" +
    "\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\036\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\052\uff8b\001\002\000\056\021\uff8f\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\036\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\052\uff8f\001\002" +
    "\000\052\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\036\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\052\uffc2\001\002\000\056\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\036\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\001" +
    "\002\000\056\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\027\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\036" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\052\uff9b\001\002\000\026\006" +
    "\054\024\057\025\056\026\076\033\060\040\051\044\047" +
    "\051\050\053\046\054\062\001\002\000\004\051\075\001" +
    "\002\000\056\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\052\uff9a\001\002\000\056\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\031\uff99\032\uff99\033\uff99\034\uff99\036\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\052\uff99\001\002\000\004\026\133\001\002\000" +
    "\046\021\106\022\115\023\107\024\101\026\uffc4\027\uffc4" +
    "\031\uffc4\032\111\034\uffc4\036\uffc4\040\113\041\114\042" +
    "\104\043\103\044\112\045\110\046\105\052\102\001\002" +
    "\000\024\006\054\024\057\025\056\033\060\040\051\044" +
    "\047\051\050\053\046\054\062\001\002\000\024\006\054" +
    "\024\057\025\056\033\060\040\051\044\047\051\050\053" +
    "\046\054\062\001\002\000\024\006\054\024\057\025\056" +
    "\033\060\040\051\044\047\051\050\053\046\054\062\001" +
    "\002\000\024\006\054\024\057\025\056\033\060\040\051" +
    "\044\047\051\050\053\046\054\062\001\002\000\024\006" +
    "\054\024\057\025\056\033\060\040\051\044\047\051\050" +
    "\053\046\054\062\001\002\000\024\006\054\024\057\025" +
    "\056\033\060\040\051\044\047\051\050\053\046\054\062" +
    "\001\002\000\024\006\054\024\057\025\056\033\060\040" +
    "\051\044\047\051\050\053\046\054\062\001\002\000\024" +
    "\006\054\024\057\025\056\033\060\040\051\044\047\051" +
    "\050\053\046\054\062\001\002\000\024\006\054\024\057" +
    "\025\056\033\060\040\051\044\047\051\050\053\046\054" +
    "\062\001\002\000\024\006\054\024\057\025\056\033\060" +
    "\040\051\044\047\051\050\053\046\054\062\001\002\000" +
    "\024\006\054\024\057\025\056\033\060\040\051\044\047" +
    "\051\050\053\046\054\062\001\002\000\024\006\054\024" +
    "\057\025\056\033\060\040\051\044\047\051\050\053\046" +
    "\054\062\001\002\000\024\006\054\024\057\025\056\033" +
    "\060\040\051\044\047\051\050\053\046\054\062\001\002" +
    "\000\052\021\uffbf\022\uffbf\023\107\024\101\026\uffbf\027" +
    "\uffbf\031\uffbf\032\uffbf\034\uffbf\036\uffbf\040\113\041\114" +
    "\042\104\043\103\044\112\045\110\046\105\047\uffbf\050" +
    "\uffbf\052\102\001\002\000\052\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\034\uffb8\036" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\052\uffb8\001\002\000\052\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\031\uffbc" +
    "\032\uffbc\034\uffbc\036\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc" +
    "\001\002\000\052\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026" +
    "\uffb6\027\uffb6\031\uffb6\032\uffb6\034\uffb6\036\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\052\uffb6\001\002\000\034\023\uffc3\024\uffc3" +
    "\026\uffc3\027\uffc3\031\uffc3\034\uffc3\036\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\001\002\000\052" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\031" +
    "\uffb7\032\uffb7\034\uffb7\036\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\052" +
    "\uffb7\001\002\000\052\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\026\uffbe\027\uffbe\031\uffbe\032\uffbe\034\uffbe\036\uffbe\040" +
    "\113\041\114\042\104\043\103\044\112\045\110\046\105" +
    "\047\uffbe\050\uffbe\052\uffbe\001\002\000\052\021\uffc0\022" +
    "\uffc0\023\107\024\101\026\uffc0\027\uffc0\031\uffc0\032\uffc0" +
    "\034\uffc0\036\uffc0\040\113\041\114\042\104\043\103\044" +
    "\112\045\110\046\105\047\uffc0\050\uffc0\052\102\001\002" +
    "\000\052\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027" +
    "\uffba\031\uffba\032\uffba\034\uffba\036\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\052\uffba\001\002\000\052\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\034\uffb9\036" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\052\uffb9\001\002\000\052\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\031\uffbb" +
    "\032\uffbb\034\uffbb\036\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\001\002\000\052\021\uffc1\022\uffc1\023\107\024\101\026" +
    "\uffc1\027\uffc1\031\uffc1\032\uffc1\034\uffc1\036\uffc1\040\113" +
    "\041\114\042\104\043\103\044\112\045\110\046\105\047" +
    "\uffc1\050\uffc1\052\uffc1\001\002\000\052\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\026\uffbd\027\uffbd\031\uffbd\032\uffbd\034" +
    "\uffbd\036\uffbd\040\113\041\114\042\104\043\103\044\112" +
    "\045\110\046\105\047\uffbd\050\uffbd\052\uffbd\001\002\000" +
    "\056\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\031\uff98\032\uff98\033\uff98\034\uff98\036\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\052\uff98\001\002\000\004\033\150\001" +
    "\002\000\004\033\145\001\002\000\022\002\uff6e\006\uff6e" +
    "\013\uff6e\016\uff6e\020\uff6e\031\uff6e\033\uff6e\053\uff6e\001" +
    "\002\000\006\040\141\051\044\001\002\000\004\026\144" +
    "\001\002\000\004\051\044\001\002\000\004\026\143\001" +
    "\002\000\004\033\uff96\001\002\000\004\033\uff95\001\002" +
    "\000\004\051\147\001\002\000\056\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\031\uff97\032\uff97" +
    "\033\uff97\034\uff97\036\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\052\uff97" +
    "\001\002\000\056\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\036\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\001\002\000\004" +
    "\051\151\001\002\000\056\021\uff8a\022\uff8a\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\034\uff8a\036\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\052\uff8a\001\002" +
    "\000\052\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027" +
    "\uffa0\031\uffa0\032\uffa0\034\uffa0\036\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\052\uffa0\001\002\000\034\021\106\022\115\023\107" +
    "\024\101\026\154\040\113\041\114\042\104\043\103\044" +
    "\112\045\110\046\105\052\102\001\002\000\056\021\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\031" +
    "\uff91\032\uff91\033\uff91\034\uff91\036\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\052\uff91\001\002\000\056\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\031\uff89\032\uff89\033" +
    "\uff89\034\uff89\036\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\052\uff89\001" +
    "\002\000\004\027\204\001\002\000\026\002\uff87\006\uff87" +
    "\013\uff87\020\uff87\025\200\026\uff87\027\uff87\031\uff87\032" +
    "\uff87\036\uff87\001\002\000\006\026\162\051\164\001\002" +
    "\000\006\026\uff81\032\174\001\002\000\030\002\uff83\006" +
    "\uff83\013\uff83\020\uff83\025\uff83\026\uff83\027\uff83\031\uff83" +
    "\032\uff83\036\uff83\051\uff83\001\002\000\004\026\173\001" +
    "\002\000\014\006\uffc6\032\171\035\uffc6\037\uffc6\051\uffc6" +
    "\001\002\000\010\006\037\037\167\051\044\001\002\000" +
    "\006\026\uff7f\032\uff7f\001\002\000\006\006\037\051\044" +
    "\001\002\000\006\026\uff7e\032\uff7e\001\002\000\004\051" +
    "\164\001\002\000\012\006\uffc5\035\uffc5\037\uffc5\051\uffc5" +
    "\001\002\000\030\002\uff82\006\uff82\013\uff82\020\uff82\025" +
    "\uff82\026\uff82\027\uff82\031\uff82\032\uff82\036\uff82\051\uff82" +
    "\001\002\000\004\051\164\001\002\000\004\026\uff80\001" +
    "\002\000\024\002\uff86\006\uff86\013\uff86\020\uff86\026\uff86" +
    "\027\uff86\031\uff86\032\uff86\036\uff86\001\002\000\024\002" +
    "\uff85\006\uff85\013\uff85\020\uff85\026\uff85\027\uff85\031\uff85" +
    "\032\uff85\036\uff85\001\002\000\010\006\037\026\162\051" +
    "\202\001\002\000\004\026\203\001\002\000\014\006\uffc6" +
    "\026\uffb3\032\171\037\uffc6\051\uffc6\001\002\000\024\002" +
    "\uff84\006\uff84\013\uff84\020\uff84\026\uff84\027\uff84\031\uff84" +
    "\032\uff84\036\uff84\001\002\000\046\004\226\006\054\012" +
    "\231\013\025\014\217\015\213\017\223\020\022\024\057" +
    "\025\056\027\204\030\uff7a\033\060\040\051\044\047\051" +
    "\236\053\046\054\062\001\002\000\066\002\uff88\006\uff88" +
    "\013\uff88\020\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025" +
    "\uff88\026\uff88\027\uff88\031\uff88\032\uff88\033\uff88\034\uff88" +
    "\036\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\052\uff88\001\002\000\066" +
    "\002\uff7d\006\uff7d\013\uff7d\020\uff7d\021\uff7d\022\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\034\uff7d\036\uff7d\040\uff7d\041\uff7d\042\uff7d\043" +
    "\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\052\uff7d" +
    "\001\002\000\054\004\uff6c\005\uff6c\006\uff6c\007\uff6c\012" +
    "\uff6c\013\uff6c\014\uff6c\015\uff6c\017\uff6c\020\uff6c\024\uff6c" +
    "\025\uff6c\027\uff6c\030\uff6c\031\007\033\uff6c\040\uff6c\044" +
    "\uff6c\051\uff6c\053\uff6c\054\uff6c\001\002\000\006\027\uffe7" +
    "\031\uffe7\001\002\000\054\004\uff6c\005\uff6c\006\uff6c\007" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\017\uff6c\020\uff6c" +
    "\024\uff6c\025\uff6c\027\uff6c\030\uff6c\031\007\033\uff6c\040" +
    "\uff6c\044\uff6c\051\uff6c\053\uff6c\054\uff6c\001\002\000\054" +
    "\004\uff6c\005\uff6c\006\uff6c\007\uff6c\012\uff6c\013\uff6c\014" +
    "\uff6c\015\uff6c\017\uff6c\020\uff6c\024\uff6c\025\uff6c\027\uff6c" +
    "\030\uff6c\031\007\033\uff6c\040\uff6c\044\uff6c\051\uff6c\053" +
    "\uff6c\054\uff6c\001\002\000\024\006\054\024\057\025\056" +
    "\033\060\040\051\044\047\051\236\053\046\054\062\001" +
    "\002\000\004\031\333\001\002\000\006\027\uffe5\031\uffe5" +
    "\001\002\000\004\035\331\001\002\000\024\006\054\024" +
    "\057\025\056\033\060\040\051\044\047\051\236\053\046" +
    "\054\062\001\002\000\006\027\uffe6\031\uffe6\001\002\000" +
    "\046\021\106\022\115\023\107\024\101\027\uffe3\031\uffe3" +
    "\032\111\036\uffc4\040\113\041\114\042\104\043\103\044" +
    "\112\045\110\046\105\047\243\050\245\052\102\001\002" +
    "\000\052\004\226\005\uff7a\006\054\007\uff7a\012\231\013" +
    "\025\014\217\015\213\017\223\020\022\024\057\025\056" +
    "\027\204\030\uff7a\033\060\040\051\044\047\051\236\053" +
    "\046\054\062\001\002\000\026\006\054\024\057\025\056" +
    "\031\uffc9\033\060\040\051\044\047\051\050\053\046\054" +
    "\062\001\002\000\054\004\uff6c\005\uff6c\006\uff6c\007\uff6c" +
    "\012\uff6c\013\uff6c\014\uff6c\015\uff6c\017\uff6c\020\uff6c\024" +
    "\uff6c\025\uff6c\027\uff6c\030\uff6c\031\007\033\uff6c\040\uff6c" +
    "\044\uff6c\051\uff6c\053\uff6c\054\uff6c\001\002\000\004\031" +
    "\311\001\002\000\004\031\uffc7\001\002\000\024\023\301" +
    "\024\273\036\300\040\304\041\305\042\276\043\274\045" +
    "\302\046\277\001\002\000\004\031\272\001\002\000\026" +
    "\006\054\024\057\025\056\027\240\033\060\040\051\044" +
    "\047\051\236\053\046\054\062\001\002\000\004\030\237" +
    "\001\002\000\054\004\uffd8\005\uffd8\006\uffd8\007\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\040\uffd8\044" +
    "\uffd8\051\uffd8\053\uffd8\054\uffd8\001\002\000\052\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\017\uffef\020\uffef\024\uffef\025\uffef\027\uffef\030\uffef" +
    "\033\uffef\040\uffef\044\uffef\051\uffef\053\uffef\054\uffef\001" +
    "\002\000\006\027\uffe4\031\uffe4\001\002\000\054\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c\031\uff8c\032" +
    "\171\033\uff8c\035\uffc6\036\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\052" +
    "\uff8c\001\002\000\116\002\uff7c\004\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\017" +
    "\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034" +
    "\uff7c\036\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c" +
    "\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053" +
    "\uff7c\054\uff7c\001\002\000\010\005\246\007\252\030\uffd2" +
    "\001\002\000\004\031\260\001\002\000\046\021\106\022" +
    "\115\023\107\024\101\027\244\031\uffe3\032\111\036\uffc4" +
    "\040\113\041\114\042\104\043\103\044\112\045\110\046" +
    "\105\047\243\050\245\052\102\001\002\000\006\027\uffe2" +
    "\031\uffe2\001\002\000\010\005\246\007\252\030\uffd2\001" +
    "\002\000\006\027\uffe1\031\uffe1\001\002\000\004\034\uffcf" +
    "\001\002\000\010\005\246\007\252\030\uffd2\001\002\000" +
    "\004\034\255\001\002\000\004\030\254\001\002\000\024" +
    "\006\054\024\057\025\056\033\060\040\051\044\047\051" +
    "\050\053\046\054\062\001\002\000\004\034\uffd0\001\002" +
    "\000\054\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\024\uffd5\025\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\033\uffd5\040\uffd5\044\uffd5\051" +
    "\uffd5\053\uffd5\054\uffd5\001\002\000\052\004\226\005\uff7a" +
    "\006\054\007\uff7a\012\231\013\025\014\217\015\213\017" +
    "\223\020\022\024\057\025\056\027\204\030\uff7a\033\060" +
    "\040\051\044\047\051\236\053\046\054\062\001\002\000" +
    "\010\005\uffd1\007\uffd1\030\uffd1\001\002\000\004\030\uffd3" +
    "\001\002\000\026\006\054\024\057\025\056\027\261\033" +
    "\060\040\051\044\047\051\050\053\046\054\062\001\002" +
    "\000\010\005\246\007\252\030\uffd2\001\002\000\034\021" +
    "\106\022\115\023\107\024\101\027\263\040\113\041\114" +
    "\042\104\043\103\044\112\045\110\046\105\052\102\001" +
    "\002\000\010\005\246\007\252\030\uffd2\001\002\000\004" +
    "\030\265\001\002\000\054\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\040" +
    "\uffd4\044\uffd4\051\uffd4\053\uffd4\054\uffd4\001\002\000\004" +
    "\030\267\001\002\000\054\004\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\040" +
    "\uffd6\044\uffd6\051\uffd6\053\uffd6\054\uffd6\001\002\000\004" +
    "\030\271\001\002\000\054\004\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\020\uffd7" +
    "\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\040" +
    "\uffd7\044\uffd7\051\uffd7\053\uffd7\054\uffd7\001\002\000\052" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\017\uffed\020\uffed\024\uffed\025\uffed\027\uffed" +
    "\030\uffed\033\uffed\040\uffed\044\uffed\051\uffed\053\uffed\054" +
    "\uffed\001\002\000\004\036\uff6a\001\002\000\004\036\uff67" +
    "\001\002\000\004\036\uff69\001\002\000\004\036\uff65\001" +
    "\002\000\004\036\uff64\001\002\000\024\006\054\024\057" +
    "\025\056\033\060\040\051\044\047\051\050\053\046\054" +
    "\062\001\002\000\004\036\uff6b\001\002\000\004\036\uff63" +
    "\001\002\000\004\036\306\001\002\000\004\036\uff68\001" +
    "\002\000\004\036\uff66\001\002\000\024\006\054\024\057" +
    "\025\056\033\060\040\051\044\047\051\050\053\046\054" +
    "\062\001\002\000\006\027\uffe0\031\uffe0\001\002\000\006" +
    "\027\uffdf\031\uffdf\001\002\000\052\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\024\uffec\025\uffec\027\uffec\030\uffec\033\uffec\040" +
    "\uffec\044\uffec\051\uffec\053\uffec\054\uffec\001\002\000\052" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\017\uffe9\020\uffe9\024\uffe9\025\uffe9\027\uffe9" +
    "\030\uffe9\033\uffe9\040\uffe9\044\uffe9\051\uffe9\053\uffe9\054" +
    "\uffe9\001\002\000\004\031\uffc8\001\002\000\010\005\uff7b" +
    "\007\uff7b\030\uff7b\001\002\000\004\031\323\001\002\000" +
    "\046\021\106\022\115\023\107\024\101\027\204\031\uffe3" +
    "\032\111\036\uffc4\040\113\041\114\042\104\043\103\044" +
    "\112\045\110\046\105\047\243\050\245\052\102\001\002" +
    "\000\056\004\uffde\005\uffde\006\uffde\007\uffde\010\320\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde\024\uffde" +
    "\025\uffde\027\uffde\030\uffde\031\uffde\033\uffde\040\uffde\044" +
    "\uffde\051\uffde\053\uffde\054\uffde\001\002\000\006\014\217" +
    "\027\204\001\002\000\054\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\040" +
    "\uffdc\044\uffdc\051\uffdc\053\uffdc\054\uffdc\001\002\000\054" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\017\uffdb\020\uffdb\024\uffdb\025\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\033\uffdb\040\uffdb\044\uffdb\051\uffdb\053" +
    "\uffdb\054\uffdb\001\002\000\024\006\054\024\057\025\056" +
    "\033\060\040\051\044\047\051\050\053\046\054\062\001" +
    "\002\000\034\021\106\022\115\023\107\024\101\027\204" +
    "\040\113\041\114\042\104\043\103\044\112\045\110\046" +
    "\105\052\102\001\002\000\056\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\326\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\020\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\040\uffdd\044\uffdd\051\uffdd\053\uffdd\054\uffdd\001" +
    "\002\000\006\014\217\027\204\001\002\000\054\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\017\uffda\020\uffda\024\uffda\025\uffda\027\uffda\030\uffda" +
    "\031\uffda\033\uffda\040\uffda\044\uffda\051\uffda\053\uffda\054" +
    "\uffda\001\002\000\054\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9\024" +
    "\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\040\uffd9" +
    "\044\uffd9\051\uffd9\053\uffd9\054\uffd9\001\002\000\024\006" +
    "\054\024\057\025\056\033\060\040\051\044\047\051\050" +
    "\053\046\054\062\001\002\000\036\021\106\022\115\023" +
    "\107\024\101\027\uffa9\031\uffa9\040\113\041\114\042\104" +
    "\043\103\044\112\045\110\046\105\052\102\001\002\000" +
    "\052\004\uffee\005\uffee\006\uffee\007\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\020\uffee\024\uffee\025\uffee\027" +
    "\uffee\030\uffee\033\uffee\040\uffee\044\uffee\051\uffee\053\uffee" +
    "\054\uffee\001\002\000\004\031\uffcb\001\002\000\004\031" +
    "\340\001\002\000\004\027\204\001\002\000\054\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\017\uffce\020\uffce\024\uffce\025\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\040\uffce\044\uffce\051\uffce\053\uffce\054" +
    "\uffce\001\002\000\024\006\054\024\057\025\056\033\060" +
    "\040\051\044\047\051\050\053\046\054\062\001\002\000" +
    "\034\021\106\022\115\023\107\024\101\031\uffcc\040\113" +
    "\041\114\042\104\043\103\044\112\045\110\046\105\052" +
    "\102\001\002\000\004\031\343\001\002\000\024\006\054" +
    "\024\057\025\056\033\060\040\051\044\047\051\236\053" +
    "\046\054\062\001\002\000\004\027\uffcd\001\002\000\004" +
    "\027\uffca\001\002\000\052\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\030\uffeb\033\uffeb\040\uffeb\044" +
    "\uffeb\051\uffeb\053\uffeb\054\uffeb\001\002\000\052\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8" +
    "\033\uffe8\040\uffe8\044\uffe8\051\uffe8\053\uffe8\054\uffe8\001" +
    "\002\000\052\004\uffea\005\uffea\006\uffea\007\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea\024\uffea\025" +
    "\uffea\027\uffea\030\uffea\033\uffea\040\uffea\044\uffea\051\uffea" +
    "\053\uffea\054\uffea\001\002\000\052\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\026\uff9e\027\uff9e\031\uff9e\032\uff9e\034\uff9e" +
    "\036\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\001\002\000\052" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\031" +
    "\uff9f\032\uff9f\034\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\052" +
    "\uff9f\001\002\000\024\006\054\024\057\025\056\033\060" +
    "\040\051\044\047\051\050\053\046\054\062\001\002\000" +
    "\034\021\106\022\115\023\107\024\101\031\ufff0\040\113" +
    "\041\114\042\104\043\103\044\112\045\110\046\105\052" +
    "\102\001\002\000\012\026\uffb1\031\uffb1\032\uffb1\036\uffb1" +
    "\001\002\000\054\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017\ufff9\020\ufff9" +
    "\024\ufff9\025\ufff9\027\ufff9\030\ufff9\033\ufff9\040\ufff9\044" +
    "\ufff9\051\ufff9\053\ufff9\054\ufff9\001\002\000\010\006\037" +
    "\036\367\051\044\001\002\000\006\026\uffad\051\357\001" +
    "\002\000\004\031\uffb0\001\002\000\004\026\366\001\002" +
    "\000\004\031\364\001\002\000\006\026\uffad\051\357\001" +
    "\002\000\004\026\uffae\001\002\000\004\031\uffaf\001\002" +
    "\000\024\006\054\024\057\025\056\033\060\040\051\044" +
    "\047\051\050\053\046\054\062\001\002\000\006\031\uffab" +
    "\036\371\001\002\000\024\006\054\024\057\025\056\033" +
    "\060\040\051\044\047\051\050\053\046\054\062\001\002" +
    "\000\034\021\106\022\115\023\107\024\101\031\uffaa\040" +
    "\113\041\114\042\104\043\103\044\112\045\110\046\105" +
    "\052\102\001\002\000\034\021\106\022\115\023\107\024" +
    "\101\031\uffac\040\113\041\114\042\104\043\103\044\112" +
    "\045\110\046\105\052\102\001\002\000\012\002\ufffa\006" +
    "\ufffa\013\ufffa\020\ufffa\001\002\000\012\002\ufffb\006\ufffb" +
    "\013\ufffb\020\ufffb\001\002\000\004\002\ufffe\001\002\000" +
    "\004\025\uffa6\001\002\000\004\051\uffa3\001\002\000\004" +
    "\025\160\001\002\000\004\051\147\001\002\000\004\025" +
    "\160\001\002\000\014\002\uffa5\006\uffa5\013\uffa5\020\uffa5" +
    "\031\uffa5\001\002\000\016\002\uffa4\006\uffa4\013\uffa4\020" +
    "\uffa4\027\204\031\uffa4\001\002\000\014\002\uffa8\006\uffa8" +
    "\013\uffa8\020\uffa8\031\uffa8\001\002\000\016\002\uffa7\006" +
    "\uffa7\013\uffa7\020\uffa7\027\204\031\uffa7\001\002\000\054" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\024\ufff8\025\ufff8" +
    "\027\ufff8\030\ufff8\033\ufff8\040\ufff8\044\ufff8\051\ufff8\053" +
    "\ufff8\054\ufff8\001\002\000\014\002\uff77\006\uff77\013\uff77" +
    "\016\011\020\uff77\001\002\000\012\002\uff78\006\uff78\013" +
    "\uff78\020\uff78\001\002\000\004\053\u010d\001\002\000\026" +
    "\002\uff72\006\uff72\013\uff72\016\uff72\020\uff72\026\uff72\031" +
    "\uff72\033\uff72\051\uff72\053\uff72\001\002\000\026\002\uff6f" +
    "\006\uff6f\013\uff6f\016\uff6f\020\uff6f\026\uff6f\031\uff6f\033" +
    "\uff6f\051\uff6f\053\uff6f\001\002\000\016\002\uff76\006\uff76" +
    "\013\uff76\016\uff76\020\uff76\031\uff76\001\002\000\012\026" +
    "\uff73\033\u0110\051\136\053\u010d\001\002\000\004\053\u010d" +
    "\001\002\000\026\002\uff71\006\uff71\013\uff71\016\uff71\020" +
    "\uff71\026\uff71\031\uff71\033\uff71\051\uff71\053\uff71\001\002" +
    "\000\004\026\u0116\001\002\000\014\026\uff6c\031\007\033" +
    "\uff6c\051\uff6c\053\uff6c\001\002\000\012\026\uff73\033\u0110" +
    "\051\136\053\u010d\001\002\000\004\026\uff74\001\002\000" +
    "\016\002\uff75\006\uff75\013\uff75\016\uff75\020\uff75\031\uff75" +
    "\001\002\000\026\002\uff70\006\uff70\013\uff70\016\uff70\020" +
    "\uff70\026\uff70\031\uff70\033\uff70\051\uff70\053\uff70\001\002" +
    "\000\016\002\uff79\006\uff79\013\uff79\016\uff79\020\uff79\031" +
    "\uff79\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\010\u0117\001\001\000\004\014\007\001\001" +
    "\000\002\001\001\000\006\004\012\005\011\001\001\000" +
    "\010\010\u010a\012\u010d\013\u010b\001\001\000\004\014\u0108" +
    "\001\001\000\020\006\022\007\016\015\015\016\017\017" +
    "\020\020\023\021\013\001\001\000\002\001\001\000\010" +
    "\045\377\063\u0100\065\u0101\001\001\000\002\001\001\000" +
    "\020\006\375\007\016\015\015\016\017\017\020\020\023" +
    "\021\013\001\001\000\004\014\374\001\001\000\004\014" +
    "\373\001\001\000\004\061\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\025\001\001\000\002\001" +
    "\001\000\012\047\041\055\037\056\040\057\044\001\001" +
    "\000\006\022\032\023\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\035\023\031\001\001\000\002\001\001\000\006\043" +
    "\354\045\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\026\062\027\067\031\064\034" +
    "\060\035\063\036\052\037\054\040\066\041\065\111\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\026\062\027\351\031\064\034\060\035\063" +
    "\036\052\037\054\040\066\041\065\001\001\000\002\001" +
    "\001\000\024\026\062\027\350\031\064\034\060\035\063" +
    "\036\052\037\054\040\066\041\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\154\043\155\045\156" +
    "\001\001\000\002\001\001\000\026\026\062\027\067\031" +
    "\064\034\060\035\063\036\052\037\054\040\066\041\065" +
    "\111\152\001\001\000\024\026\062\027\151\031\064\034" +
    "\060\035\063\036\052\037\054\040\066\041\065\001\001" +
    "\000\006\010\133\066\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\070\033\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\025\076\026\062\027\067\031\064\034\060\035" +
    "\063\036\052\037\054\040\066\041\065\111\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\062\027\067" +
    "\031\064\034\060\035\063\036\052\037\054\040\066\041" +
    "\065\111\131\001\001\000\026\026\062\027\067\031\064" +
    "\034\060\035\063\036\052\037\054\040\066\041\065\111" +
    "\130\001\001\000\026\026\062\027\067\031\064\034\060" +
    "\035\063\036\052\037\054\040\066\041\065\111\127\001" +
    "\001\000\026\026\062\027\067\031\064\034\060\035\063" +
    "\036\052\037\054\040\066\041\065\111\126\001\001\000" +
    "\026\026\062\027\067\031\064\034\060\035\063\036\052" +
    "\037\054\040\066\041\065\111\125\001\001\000\026\026" +
    "\062\027\067\031\064\034\060\035\063\036\052\037\054" +
    "\040\066\041\065\111\124\001\001\000\026\026\062\027" +
    "\067\031\064\034\060\035\063\036\052\037\054\040\066" +
    "\041\065\111\123\001\001\000\026\026\062\027\067\031" +
    "\064\034\060\035\063\036\052\037\054\040\066\041\065" +
    "\111\122\001\001\000\030\025\121\026\062\027\067\031" +
    "\064\034\060\035\063\036\052\037\054\040\066\041\065" +
    "\111\077\001\001\000\026\026\062\027\067\031\064\034" +
    "\060\035\063\036\052\037\054\040\066\041\065\111\120" +
    "\001\001\000\026\026\062\027\067\031\064\034\060\035" +
    "\063\036\052\037\054\040\066\041\065\111\117\001\001" +
    "\000\026\026\062\027\067\031\064\034\060\035\063\036" +
    "\052\037\054\040\066\041\065\111\116\001\001\000\026" +
    "\026\062\027\067\031\064\034\060\035\063\036\052\037" +
    "\054\040\066\041\065\111\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\137\001\001\000\002\001\001\000\004\055\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\204\052\205\001\001\000\006\045\176\046" +
    "\175\001\001\000\010\024\164\050\162\051\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\165\055\037\056\040\057\044" +
    "\001\001\000\002\001\001\000\012\047\167\055\037\056" +
    "\040\057\044\001\001\000\002\001\001\000\004\024\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\164\050\174\051\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\164\047\200\050" +
    "\162\051\160\055\037\056\040\057\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\015" +
    "\233\020\023\021\013\024\215\025\226\026\062\027\067" +
    "\031\064\034\060\035\063\036\052\037\054\040\066\041" +
    "\065\052\211\053\231\054\221\062\234\067\213\070\227" +
    "\071\224\072\206\073\223\074\210\075\207\076\217\077" +
    "\214\101\232\111\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\347\001\001\000\002\001\001\000" +
    "\004\014\346\001\001\000\004\014\345\001\001\000\050" +
    "\024\215\025\226\026\062\027\067\031\064\034\060\035" +
    "\063\036\052\037\054\040\066\041\065\062\234\067\333" +
    "\075\207\076\217\077\214\102\334\105\335\111\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\024\215\025\226\026\062\027\067\031\064\034" +
    "\060\035\063\036\052\037\054\040\066\041\065\062\234" +
    "\067\314\075\207\076\217\077\214\111\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\015\233\020\023" +
    "\021\013\024\215\025\226\026\062\027\067\031\064\034" +
    "\060\035\063\036\052\037\054\040\066\041\065\052\211" +
    "\053\313\054\221\062\234\067\213\070\227\071\224\072" +
    "\206\073\223\074\210\075\207\076\217\077\214\101\232" +
    "\111\220\001\001\000\030\025\312\026\062\027\067\031" +
    "\064\034\060\035\063\036\052\037\054\040\066\041\065" +
    "\111\077\001\001\000\004\014\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\274\100\302\001\001" +
    "\000\002\001\001\000\044\024\215\025\226\026\062\027" +
    "\067\031\064\034\060\035\063\036\052\037\054\040\066" +
    "\041\065\062\234\067\240\075\207\076\217\077\214\111" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\106\267\107\246\110\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\106" +
    "\250\107\246\110\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\106\256\107\246\110\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\025\252\026\062" +
    "\027\067\031\064\034\060\035\063\036\052\037\054\040" +
    "\066\041\065\111\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\015\233\020\023\021\013\024\215\025" +
    "\226\026\062\027\067\031\064\034\060\035\063\036\052" +
    "\037\054\040\066\041\065\052\211\053\255\054\221\062" +
    "\234\067\213\070\227\071\224\072\206\073\223\074\210" +
    "\075\207\076\217\077\214\101\232\111\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\062\027\067" +
    "\031\064\034\060\035\063\036\052\037\054\040\066\041" +
    "\065\111\261\001\001\000\010\106\265\107\246\110\247" +
    "\001\001\000\002\001\001\000\010\106\263\107\246\110" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\025\307\026\062\027\067\031\064\034\060\035\063" +
    "\036\052\037\054\040\066\041\065\111\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\025\306\026\062\027" +
    "\067\031\064\034\060\035\063\036\052\037\054\040\066" +
    "\041\065\111\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\316\001" +
    "\001\000\002\001\001\000\006\052\321\072\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\062\027" +
    "\067\031\064\034\060\035\063\036\052\037\054\040\066" +
    "\041\065\111\323\001\001\000\004\052\324\001\001\000" +
    "\002\001\001\000\006\052\327\072\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\026\062\027\067\031" +
    "\064\034\060\035\063\036\052\037\054\040\066\041\065" +
    "\111\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\336\001\001" +
    "\000\002\001\001\000\030\026\062\027\067\031\064\034" +
    "\060\035\063\036\052\037\054\040\066\041\065\104\341" +
    "\111\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\024\215\025\226\026\062\027\067\031\064\034\060" +
    "\035\063\036\052\037\054\040\066\041\065\062\234\067" +
    "\344\075\207\076\217\077\214\103\343\111\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\026\062\027\067\031\064\034\060\035" +
    "\063\036\052\037\054\040\066\041\065\111\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\367\055\037\056\040\057\044\001\001\000\006" +
    "\060\361\061\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\060\364\061\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\026\062\027" +
    "\067\031\064\034\060\035\063\036\052\037\054\040\066" +
    "\041\065\111\372\001\001\000\002\001\001\000\026\026" +
    "\062\027\067\031\064\034\060\035\063\036\052\037\054" +
    "\040\066\041\065\111\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\u0105\043\u0106\045\156\001\001\000\004\064\u0102\001\001" +
    "\000\010\042\u0103\043\u0104\045\156\001\001\000\002\001" +
    "\001\000\006\044\204\052\205\001\001\000\002\001\001" +
    "\000\006\044\204\052\205\001\001\000\002\001\001\000" +
    "\006\004\u0109\005\011\001\001\000\002\001\001\000\004" +
    "\013\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\u010a\011\u0111\012\u0112\013\u010b" +
    "\001\001\000\004\013\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0113\001\001\000\012\010\u010a" +
    "\011\u0114\012\u0112\013\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	int tempCounter = 0 ;
	int JumpLabels = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sourceFile ::= packageClause optionalSemiColon importDecls topLevelDecls 
            {
              String RESULT =null;
		
					System.out.println("source");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sourceFile ::= packageClause optionalSemiColon importDecls 
            {
              String RESULT =null;
		
					System.out.println("source");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // topLevelDecls ::= topLevelDecl topLevelDecls 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // topLevelDecls ::= topLevelDecl 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // topLevelDecl ::= declaration 
            {
              String RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String decl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						System.out.println(decl);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // topLevelDecl ::= functionDecl optionalSemiColon 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // topLevelDecl ::= methodDecl optionalSemiColon 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= constDecl SEMI_COLON 
            {
              String RESULT =null;
		int constDeclLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int constDeclLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String constDeclLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = constDeclLabel;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= varDecl SEMI_COLON 
            {
              String RESULT =null;
		int varDeclLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String varDeclLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = varDeclLabel;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constDecl ::= CONST constSpec 
            {
              String RESULT =null;
		int constSpecLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constSpecLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String constSpecLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = constSpecLabel;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constDecl ::= CONST OPEN_PARAN constSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constDecl ::= CONST OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constSpecs ::= constSpec SEMI_COLON constSpecs 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constSpecs ::= constSpec SEMI_COLON 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constSpec ::= IDENTIFIER 
            {
              String RESULT =null;
		int lexicalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexicalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexical = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = lexical;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constSpec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int lexicalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexicalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexical = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = lexical + " = " + expr.addr + "\n" + expr.code;
					System.out.println("================constSpec===============");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constSpec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		int lexicalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lexicalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String lexical = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = lexical + " = " + expr.addr + "\n" + expr.code;
					System.out.println(RESULT);
					System.out.println("================constSpec===============");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= declaration 
            {
              String RESULT =null;
		int declarationLABELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declarationLABELright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String declarationLABEL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("================declaration=================");
					RESULT = declarationLABEL;
					System.out.println("=================================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= simpleStmt SEMI_COLON 
            {
              String RESULT =null;
		int stmtLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String stmtLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.out.println("================simpleStmt=================");
					RESULT = stmtLabel;
					System.out.println(stmtLabel);
					System.out.println("=================================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= returnStmt SEMI_COLON 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= breakStmt SEMI_COLON 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= block optionalSemiColon 
            {
              String RESULT =null;
		
					System.out.println("statement block");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= ifStmt optionalSemiColon 
            {
              String RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ifst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.err.println("================simpleStmt=================");
					System.err.println(ifst);
					RESULT = ifst;

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= switchStmt optionalSemiColon 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= forStmt optionalSemiColon 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simpleStmt ::= expressionStmt 
            {
              String RESULT =null;
		int expressionStmtLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionStmtLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expressionStmtLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("=============expressionStmt==============");
					RESULT = expressionStmtLabel;
					System.out.println("===========================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simpleStmt ::= incDecStmt 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simpleStmt ::= assignment 
            {
              String RESULT =null;
		int assignmentLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignmentLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String assignmentLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("=============assignment==============");
					RESULT = assignmentLabel;
					System.out.println("===========================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simpleStmt ::= shortVarDecl 
            {
              String RESULT =null;
		int assignmentLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignmentLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String assignmentLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("=============shortVarDecl==============");
					RESULT = assignmentLabel;
					System.out.println("===========================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressionStmt ::= expression 
            {
              String RESULT =null;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						System.out.println("=============expressionStmt=============");
						RESULT = expressionLabel.toString();
						System.out.println(expressionLabel);
						System.out.println("===========================");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // incDecStmt ::= expression INCREMENT 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // incDecStmt ::= expression DECREMENT 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignment ::= expressionList assignOp EQUAL expressionList 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment ::= expressionList EQUAL expressionList 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ifStmt ::= IF expression block 
            {
              String RESULT =null;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blockLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String blockLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("===========IF State==============");
				expressionLabel.code = expressionLabel.code.replace("$$","");
				expressionLabel.addr = expressionLabel.addr.replace("$$","");
				String s = expressionLabel.code + "\nIf " + expressionLabel.addr + " Goto L" + JumpLabels + "\n" +
				"Goto L" + (JumpLabels+1) + "\n" + "L" + JumpLabels +":\n" + blockLabel + "L" +  (JumpLabels+1) + ":\n";
				JumpLabels++;
				s = s.replace("\n\n", "\n");
				System.out.println(s);
				RESULT = s;
				System.out.println("=========================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ifStmt ::= IF simpleStmt SEMI_COLON expression block 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blockLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String blockLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("===========IF simpleStmt SEMI_COLON block ELSE ifStmt==============");
				expressionLabel.code = expressionLabel.code.replace("$$","");
				expressionLabel.addr = expressionLabel.addr.replace("$$","");
				String s = st + expressionLabel.code + "\nIf " + expressionLabel.addr + " Goto L" + JumpLabels + "\n" +
				"Goto L" + (JumpLabels+1) + "\n" + "L" + JumpLabels +":\n" + blockLabel + "L" +(JumpLabels+1)+":\n" ;
				JumpLabels++;
				s = s.replace("\n\n", "\n");
				System.out.println(s);
				RESULT = s;
				System.out.println("=========================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ifStmt ::= IF expression block ELSE ifStmt 
            {
              String RESULT =null;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blockLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String blockLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ifst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				expressionLabel.code = expressionLabel.code.replace("$$","");
				expressionLabel.addr = expressionLabel.addr.replace("$$","");
				String s = expressionLabel.code + "\nIf " + expressionLabel.addr + " Goto L" + JumpLabels + "\n" +
				"Goto L" + (JumpLabels+1) + "\n" + "L" + JumpLabels +":\n" + blockLabel + "L" +  (JumpLabels+1) + ":\n" + ifst;
				JumpLabels++;
				System.out.println("===========IF expression block ELSE ifStmt==============");
				s = s.replace("\n\n", "\n");
				System.out.println(s);
				RESULT = s;
				System.out.println("=========================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ifStmt ::= IF expression block ELSE block 
            {
              String RESULT =null;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blockLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String blockLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int secondBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int secondBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String secondBlock = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				expressionLabel.code = expressionLabel.code.replace("$$","");
				expressionLabel.addr = expressionLabel.addr.replace("$$","");
				String s = expressionLabel.code + "\nIf " + expressionLabel.addr + " Goto L" + JumpLabels + "\n" +
				"Goto L" + (JumpLabels+1) + "\n" + "L" + JumpLabels +":\n" + blockLabel + "Goto LL" + JumpLabels + ":\n" +
				"L" + (JumpLabels+1) + "\n" + secondBlock + "LL" + JumpLabels + ":\n";
				JumpLabels++;
				System.out.println("===========IF expression block ELSE block==============");
				s = s.replace("\n\n", "\n");
				System.out.println(s);
				RESULT = s;
				System.out.println("=========================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE ifStmt 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blockLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int blockLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String blockLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ifStleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ifSt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				expressionLabel.code = expressionLabel.code.replace("$$","");
				expressionLabel.addr = expressionLabel.addr.replace("$$","");
				String s = st + "\n" + expressionLabel.code + "\nIf t" + expressionLabel.addr + " Goto L" + JumpLabels + "\n" +
				"Goto L" + (JumpLabels+1) + "\n" + "L" + JumpLabels +":\n" + blockLabel + "Goto LL" + JumpLabels + "\n" +
				"L" +  (JumpLabels+1) + ":\n" + ifSt;
				JumpLabels++;
				System.out.println("===========IF simpleStmt SEMI_COLON expression block ELSE ifStmt==============");
				System.out.println(s);
				RESULT = s;
				System.out.println("=========================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE block 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				System.out.println("===========IF simpleStmt SEMI_COLON expression block ELSE block==============");
				System.out.println(expr.toString());
//				RESULT = s;
				System.out.println("=========================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // switchStmt ::= exprSwitchStmt 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprSwitchStmt ::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprSwitchStmt ::= SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprCaseClauses ::= exprCaseClause exprCaseClauses 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprCaseClauses ::= 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprCaseClause ::= exprSwitchCase COLON statementList 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClause",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprSwitchCase ::= CASE expressionList 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprSwitchCase ::= DEFAULT 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // forStmt ::= FOR forClause block 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // forClause ::= initStmt SEMI_COLON condition SEMI_COLON postStmt 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condition ::= expression 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // initStmt ::= simpleStmt 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initStmt",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // postStmt ::= simpleStmt 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postStmt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // returnStmt ::= RETURN 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // returnStmt ::= RETURN expressionList 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // breakStmt ::= BREAK 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakStmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // identifierList ::= IDENTIFIER 
            {
              String RESULT =null;
		int IDENTIFIERLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IDENTIFIERLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String IDENTIFIERLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = IDENTIFIERLabel;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // identifierList ::= IDENTIFIER COMMA identifierList 
            {
              String RESULT =null;
		int IDENTIFIERLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int IDENTIFIERLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String IDENTIFIERLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int IDENTIFIERListLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IDENTIFIERListLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String IDENTIFIERListLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressionList ::= expression 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = expr.toString();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressionList ::= expression COMMA expressionList 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = expr.toString()+",,," + el;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= unaryExpr 
            {
              Expression RESULT =null;
		int unaryExprLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unaryExprLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String unaryExprLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					////System.out.println("unaryExpr");
					RESULT = new Expression(unaryExprLabel);
					//System.err.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression REL_OP expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					/*System.out.println(RESULT.toString());*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression OR_OP expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression AND_OP expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression ASTRISK expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression SLASH expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression PERCENT expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression SHIFT_RIGHT expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression SHIFT_LEFT expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression AMBERSAND expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression EXCLAMATION expression 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String operation = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Expression(expr1, expr2, operation, tempCounter);
					tempCounter ++;
					//System.out.println(RESULT.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= typeName 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= typeLit 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // typeName ::= IDENTIFIER 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // typeLit ::= functionType 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // functionType ::= FUNC signature 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionType",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varDecl ::= VAR varSpec 
            {
              String RESULT =null;
		int varSpecLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varSpecLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varSpecLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				//System.out.println("============varDecl=========================");
				RESULT = varSpecLabel;
				//System.out.println(varSpecLabel);
				//System.out.println("=====================================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // varDecl ::= VAR OPEN_PARAN varSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // varSpecs ::= varSpec SEMI_COLON varSpecs 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // varSpecs ::= 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varSpec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int lexicalLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexicalLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lexicalLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				expressionLabel.code = expressionLabel.code.replace("$$","");
				expressionLabel.addr = expressionLabel.addr.replace("$$","");
				RESULT = expressionLabel.code + "\n" + lexicalLabel + " = " + expressionLabel.addr + "\n";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // varSpec ::= IDENTIFIER type 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varSpec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // shortVarDecl ::= identifierList COLON_EQUAL expression 
            {
              String RESULT =null;
		int identifierListLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierListLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierListLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						System.err.println("shortVarDecl   ERROR");
						System.err.println(expressionLabel);
						System.err.println(identifierListLabel);
						if(expressionLabel.code.length() == 0)
						{
							String arr[] = expressionLabel.addr.split("\\$\\$");
							//System.err.println( arr[1]);
							//System.out.print(identifierListLabel + " = " + arr[0]);
							if(arr.length>1){
									RESULT = arr[1] + "\n" + identifierListLabel + " = " + arr[0] + "\n";
							}
							else {
								RESULT = identifierListLabel + " = " + arr[0] + "\n";
							}

						}
						else{
							System.err.println("shortVarDecl   ERROR");
						}
						/*System.out.println(identifierListLabel + " = " + expressionLabel.addr);*/
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shortVarDecl",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // functionDecl ::= FUNC functionName function 
            {
              String RESULT =null;
		int functionNameLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int functionNameLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String functionNameLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String function = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						System.out.println(functionNameLabel+":");
						function = function.replace("\n\n", "\n");
						System.out.println("begin_func;");
						System.out.print(function);
						System.out.println("end_func;");
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // functionDecl ::= FUNC functionName signature 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // functionName ::= IDENTIFIER 
            {
              String RESULT =null;
		int lexicalLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexicalLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexicalLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = lexicalLabel;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionName",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // methodDecl ::= FUNC receiver methodName function 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // methodDecl ::= FUNC receiver methodName signature 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // receiver ::= parameters 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // methodName ::= IDENTIFIER 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodName",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unaryExpr ::= primaryExpr 
            {
              String RESULT =null;
		int primaryExprLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primaryExprLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String primaryExprLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = primaryExprLabel;
					System.out.println("unaryExpr ======> unaryExpression");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unaryExpr ::= MINUS unaryExpr 
            {
              String RESULT =null;
		int unaryExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unaryExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String unaryExpression = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = " - " + unaryExpression;
					////System.out.println("unaryExpression");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unaryExpr ::= EXCLAMATION unaryExpr 
            {
              String RESULT =null;
		int unaryExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unaryExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String unaryExpression = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = " ! " + unaryExpression;
					////System.out.println("unaryExpression");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unaryExpr ::= ASTRISK unaryExpr 
            {
              String RESULT =null;
		int unaryExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unaryExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String unaryExpression = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = " * " + unaryExpression;
					////System.out.println("unaryExpression");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // primaryExpr ::= operand 
            {
              String RESULT =null;
		int operandLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operandLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String operandLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("Primary expression -----> operand");
					RESULT = operandLabel;
					System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // primaryExpr ::= primaryExpr selector 
            {
              String RESULT =null;
		
					System.err.println("+++++++++++++++++++++");
					System.out.println("primaryExpr	::= primaryExpr selector");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // primaryExpr ::= primaryExpr arguments 
            {
              String RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String args = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//System.out.println(pr);
					System.err.println("+++++++++++++++++++++");
					args = args.replace("\n", "");
					String argsArr[] = args.split(",,,");
					String s = "";
					for(int i=0; i<argsArr.length; i++){
						s += "push_params: " + argsArr[i] + "\n";
					}
					s  += pr + "\n";
					s += "pop_params;" + "\n";
					/*for(int i=0; i<argsArr.length; i++){
						s += "pop_params;" + "\n";
					}*/
					RESULT = s;
					System.err.println("+++++++++++++++++++++");
					System.out.println(s);
					System.out.println("primaryExpr	::= primaryExpr arguments");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;
		
					System.out.println("=============selector=================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
					System.out.println("=============arguments=================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // arguments ::= OPEN_PARAN expressionList CLOSE_PARAN 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = el;
					System.out.println("=============arguments=================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // methodExpr ::= DOT receiverType DOT methodName 
            {
              String RESULT =null;
		
					System.out.println("=============methodExpr=================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodExpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // receiverType ::= OPEN_PARAN ASTRISK typeName CLOSE_PARAN 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiverType",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // receiverType ::= OPEN_PARAN typeName CLOSE_PARAN 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiverType",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operand ::= literal 
            {
              String RESULT =null;
		int literalLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int literalLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String literalLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.err.println(literalLabel);
				RESULT = literalLabel;
				System.out.println("operand	::=	literal");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operand ::= operandName 
            {
              String RESULT =null;
		int operandNameLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operandNameLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String operandNameLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = operandNameLabel;
				System.out.println("operand	::=	operandName");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operand ::= methodExpr 
            {
              String RESULT =null;
		
				System.out.println("operand	::=	methodExpr");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              String RESULT =null;
		int expressionLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression expressionLabel = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = expressionLabel.addr + "\n" + expressionLabel.code;
				System.out.println("operand	::=	OPEN_PARAN expression:expressionLabel CLOSE_PARAN");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // literal ::= basicLit 
            {
              String RESULT =null;
		int basicLitLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int basicLitLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String basicLitLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = basicLitLabel;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // literal ::= functionLit 
            {
              String RESULT =null;
		int functionLitLABELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionLitLABELright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String functionLitLABEL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = functionLitLABEL;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // basicLit ::= INT_LIT 
            {
              String RESULT =null;
		int INT_LIT_LABELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int INT_LIT_LABELright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String INT_LIT_LABEL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = INT_LIT_LABEL;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // basicLit ::= STRING_LIT 
            {
              String RESULT =null;
		int STRING_LIT_LABELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int STRING_LIT_LABELright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String STRING_LIT_LABEL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = STRING_LIT_LABEL;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operandName ::= IDENTIFIER 
            {
              String RESULT =null;
		int lexicalValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexicalValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexicalValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = lexicalValue;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operandName ::= qualifiedIdent 
            {
              String RESULT =null;
		int lexicalValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexicalValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexicalValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = lexicalValue;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // qualifiedIdent ::= DOT packageName DOT IDENTIFIER 
            {
              String RESULT =null;
		int lexicalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexicalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lexical = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						System.err.println(lexical);
						System.out.println("t" + tempCounter + "= call " + lexical);
						System.out.println("=============qualifiedIdent=================");
						RESULT = "t" + tempCounter + "= call " + lexical;
												tempCounter++;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualifiedIdent",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // functionLit ::= FUNC function 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionLit",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // function ::= signature functionBody 
            {
              String RESULT =null;
		int functionBodyLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionBodyLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String functionBodyLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = functionBodyLabel;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // signature ::= parameters 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // signature ::= parameters result 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // result ::= parameters 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parameters ::= OPEN_PARAN parameterList CLOSE_PARAN 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parameterList ::= parameterDecl 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameterList ::= parameterDecl COMMA parameterList 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameterDecl ::= identifierList type 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parameterDecl ::= identifierList CDOTS type 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // functionBody ::= block 
            {
              String RESULT =null;
		int blockLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String blockLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = blockLabel;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBody",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // block ::= OPEN_CURLY statementList CLOSE_CURLY 
            {
              String RESULT =null;
		int statementListLABELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementListLABELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String statementListLABEL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = statementListLABEL;
				System.out.println("================statementList===============");
				System.out.println(statementListLABEL);
				System.out.println("===============================");
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statementList ::= statement statementList 
            {
              String RESULT =null;
		int statementListLABELleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementListLABELright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String statementListLABEL = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						System.out.println("=========ADDING STATEMENT=========");
						System.out.println(statementListLABEL);
						RESULT = statementListLABEL + st;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statementList ::= 
            {
              String RESULT =null;
		
						RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // packageClause ::= PACKAGE packageName 
            {
              String RESULT =null;
		
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // importDecls ::= importDecl optionalSemiColon importDecls 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // importDecls ::= 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // importDecl ::= IMPORT importSpec 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // importDecl ::= IMPORT OPEN_PARAN importSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // importSpecs ::= importSpec optionalSemiColon importSpecs 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // importSpecs ::= 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // importSpec ::= importPath 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // importSpec ::= DOT importPath 
            {
              String RESULT =null;
		
					System.out.println("=============importSpec=================");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // importSpec ::= packageName importPath 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // importPath ::= STRING_LIT 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importPath",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // packageName ::= IDENTIFIER 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // optionalSemiColon ::= SEMI_COLON 
            {
              String RESULT =null;
		
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // optionalSemiColon ::= 
            {
              String RESULT =null;
		
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // assignOp ::= PLUS 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // assignOp ::= MINUS 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // assignOp ::= mulOp 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignOp",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // mulOp ::= ASTRISK 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // mulOp ::= SLASH 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // mulOp ::= SHIFT_LEFT 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // mulOp ::= SHIFT_RIGHT 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // mulOp ::= PERCENT 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // mulOp ::= AMBERSAND 
            {
              String RESULT =null;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
